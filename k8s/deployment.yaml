# ==============================================================================
# Kubernetes Deployment Configuration for Make.com FastMCP Server
# Production-ready container orchestration with high availability
# ==============================================================================

# ----------------------------------------------------------------------------
# Namespace
# ----------------------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: make-fastmcp
  labels:
    name: make-fastmcp
    environment: production

---
# ----------------------------------------------------------------------------
# ConfigMap for Application Configuration
# ----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: fastmcp-config
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: config
data:
  NODE_ENV: "production"
  LOG_LEVEL: "warn"
  PORT: "3000"
  METRICS_PORT: "9090"
  REQUEST_TIMEOUT: "30000"
  KEEP_ALIVE_TIMEOUT: "5000"
  HEADERS_TIMEOUT: "60000"
  MAX_CONCURRENT_CONNECTIONS: "1000"
  MAX_TOOL_EXECUTIONS: "100"
  MEMORY_LIMIT_MB: "512"
  CPU_THROTTLE_THRESHOLD: "80"
  RATE_LIMIT_MAX_REQUESTS: "100"
  RATE_LIMIT_WINDOW_MS: "900000"
  METRICS_ENABLED: "true"
  METRICS_PATH: "/metrics"
  HEALTH_CHECK_PATH: "/health"
  LIVENESS_PATH: "/health/live"
  READINESS_PATH: "/health/ready"
  CACHE_DEFAULT_TTL: "300"
  MAX_MEMORY_CACHE: "100"
  ENABLE_ACCESS_LOGS: "true"
  ENABLE_ERROR_TRACKING: "true"
  ENABLE_STRUCTURED_LOGGING: "true"

---
# ----------------------------------------------------------------------------
# Secret for Sensitive Configuration
# ----------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: fastmcp-secrets
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: secrets
type: Opaque
stringData:
  MAKE_API_KEY: "your-make-api-key-here"  # Replace with actual key
  AUTH_SECRET: "your-jwt-secret-here"     # Replace with actual secret
  REDIS_PASSWORD: "secure-redis-password"  # Replace with actual password
  MAKE_BASE_URL: "https://eu1.make.com/api/v2"

---
# ----------------------------------------------------------------------------
# Redis Deployment
# ----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: make-fastmcp
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        args:
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fastmcp-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999

---
# ----------------------------------------------------------------------------
# Redis Service
# ----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: make-fastmcp
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP

---
# ----------------------------------------------------------------------------
# Redis Persistent Volume Claim
# ----------------------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: make-fastmcp
  labels:
    app: redis
    component: cache
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2  # Adjust based on your cloud provider

---
# ----------------------------------------------------------------------------
# FastMCP Server Deployment
# ----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: make-fastmcp-server
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: api
spec:
  replicas: 3  # High availability with 3 replicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: make-fastmcp-server
  template:
    metadata:
      labels:
        app: make-fastmcp-server
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: fastmcp-server
        image: make-fastmcp-server:production
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        # Configuration from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: LOG_LEVEL
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: PORT
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: METRICS_PORT
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: REQUEST_TIMEOUT
        - name: KEEP_ALIVE_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: KEEP_ALIVE_TIMEOUT
        - name: HEADERS_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: HEADERS_TIMEOUT
        - name: MAX_CONCURRENT_CONNECTIONS
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: MAX_CONCURRENT_CONNECTIONS
        - name: MAX_TOOL_EXECUTIONS
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: MAX_TOOL_EXECUTIONS
        - name: MEMORY_LIMIT_MB
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: MEMORY_LIMIT_MB
        - name: CPU_THROTTLE_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: fastmcp-config
              key: CPU_THROTTLE_THRESHOLD
        # Secrets
        - name: MAKE_API_KEY
          valueFrom:
            secretKeyRef:
              name: fastmcp-secrets
              key: MAKE_API_KEY
        - name: AUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: fastmcp-secrets
              key: AUTH_SECRET
        - name: MAKE_BASE_URL
          valueFrom:
            secretKeyRef:
              name: fastmcp-secrets
              key: MAKE_BASE_URL
        # Redis connection
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fastmcp-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe/1.0"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe/1.0"
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/live
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: fastmcp-config
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      terminationGracePeriodSeconds: 30

---
# ----------------------------------------------------------------------------
# FastMCP Server Service
# ----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: make-fastmcp-server
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: make-fastmcp-server
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  type: ClusterIP

---
# ----------------------------------------------------------------------------
# Horizontal Pod Autoscaler
# ----------------------------------------------------------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: make-fastmcp-server-hpa
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: make-fastmcp-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
# ----------------------------------------------------------------------------
# Ingress (HTTPS with cert-manager)
# ----------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: make-fastmcp-server-ingress
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Adjust based on your cert-manager setup
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - your-domain.com  # Replace with your actual domain
    secretName: fastmcp-tls
  rules:
  - host: your-domain.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: make-fastmcp-server
            port:
              number: 3000

---
# ----------------------------------------------------------------------------
# Pod Disruption Budget
# ----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: make-fastmcp-server-pdb
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: make-fastmcp-server

---
# ----------------------------------------------------------------------------
# Network Policy (Security)
# ----------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: make-fastmcp-network-policy
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: security
spec:
  podSelector:
    matchLabels:
      app: make-fastmcp-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound for Make.com API calls
    ports:
    - protocol: TCP
      port: 443

---
# ----------------------------------------------------------------------------
# ServiceMonitor for Prometheus (if using Prometheus Operator)
# ----------------------------------------------------------------------------
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: make-fastmcp-server-metrics
  namespace: make-fastmcp
  labels:
    app: make-fastmcp-server
    component: monitoring
spec:
  selector:
    matchLabels:
      app: make-fastmcp-server
  endpoints:
  - port: metrics
    path: /metrics
    interval: 15s
    scrapeTimeout: 10s