# ==============================================================================
# Docker Compose Development Override
# Development-optimized configuration with hot reloading and debugging
# ==============================================================================

version: '3.8'

services:
  # ----------------------------------------------------------------------------
  # Development Application Service Override
  # ----------------------------------------------------------------------------
  make-fastmcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=development
    image: make-fastmcp-server:dev
    container_name: make-fastmcp-server-dev
    
    # Development environment variables
    environment:
      # Core Configuration (override production settings)
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - AUTH_ENABLED=false
      
      # Development-friendly rate limiting
      - RATE_LIMIT_MAX_REQUESTS=200
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_SKIP_SUCCESS=false
      - RATE_LIMIT_SKIP_FAILED=false
      
      # Hot reloading support
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
    
    # Volume mounting for development
    volumes:
      # Mount source code for hot reloading
      - .:/app:cached
      # Prevent node_modules from being overwritten
      - /app/node_modules
      # Development logs
      - ./logs:/app/logs:rw
      # Development configuration
      - ./.env:/app/.env:ro
    
    # Development ports (may expose additional debugging ports)
    ports:
      - "${HOST_PORT:-3000}:3000"
      - "${DEBUG_PORT:-9229}:9229"  # Node.js debugging port
    
    # Resource limits (more relaxed for development)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Development health check (more frequent)
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s
    
    # Command override for development mode with debugging
    command: ["npm", "run", "dev"]
    
    # Enable stdin/tty for interactive debugging
    stdin_open: true
    tty: true

  # ----------------------------------------------------------------------------
  # Development Redis Override (Optional)
  # ----------------------------------------------------------------------------
  redis:
    # Use Redis Commander for development debugging
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    # Development environment
    environment:
      - REDIS_MAXMEMORY_POLICY=noeviction  # Don't evict keys in development
    
    # Development resource limits (more relaxed)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ----------------------------------------------------------------------------
  # Redis Commander (Development Tool)
  # ----------------------------------------------------------------------------
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-dev
    hostname: redis-commander
    profiles:
      - development
      - tools
    
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-fastmcp-redis-password}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    
    depends_on:
      - redis
    
    networks:
      - make-fastmcp-network
    
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # Development Database (Optional - for future features)
  # ----------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: make-fastmcp-postgres-dev
    profiles:
      - development
      - database
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-make_fastmcp_dev}
      - POSTGRES_USER=${POSTGRES_USER:-fastmcp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fastmcp_dev_password}
    
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - make-fastmcp-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fastmcp}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------------------------------------------------------------------
  # pgAdmin (Development Tool)
  # ----------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: make-fastmcp-pgadmin-dev
    profiles:
      - development
      - tools
      - database
    
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@fastmcp.dev}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    
    volumes:
      - pgadmin-dev-data:/var/lib/pgadmin
    
    depends_on:
      - postgres
    
    networks:
      - make-fastmcp-network
    
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # Mailhog (Development Email Testing)
  # ----------------------------------------------------------------------------
  mailhog:
    image: mailhog/mailhog:latest
    container_name: make-fastmcp-mailhog-dev
    profiles:
      - development
      - tools
    
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"  # Web UI
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP
    
    networks:
      - make-fastmcp-network
    
    restart: unless-stopped

# ==============================================================================
# Development Volume Configuration
# ==============================================================================
volumes:
  # PostgreSQL development data
  postgres-dev-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres-dev
  
  # pgAdmin development data
  pgadmin-dev-data:
    driver: local

# ==============================================================================
# Development Environment Instructions
# ==============================================================================

# Usage Examples:
#
# 1. Start development environment:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
#
# 2. Start with development tools (Redis Commander, pgAdmin):
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml --profile tools up -d
#
# 3. Start full development stack with database:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml --profile development up -d
#
# 4. View logs in development mode:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs -f make-fastmcp-server
#
# 5. Execute interactive shell in development container:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml exec make-fastmcp-server sh
#
# 6. Run tests in development container:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml exec make-fastmcp-server npm test
#
# 7. Debug with Node.js inspector:
#    - Start container with debug port exposed
#    - Connect your IDE to localhost:9229
#    - Set breakpoints in your source code
#
# 8. Access development tools:
#    - Application: http://localhost:3000
#    - Redis Commander: http://localhost:8081 (admin/admin)
#    - pgAdmin: http://localhost:8080 (admin@fastmcp.dev/admin)
#    - MailHog: http://localhost:8025
#
# Development Features:
# - Hot reloading with volume mounting
# - Debug port exposure for IDE integration
# - Development tools (Redis Commander, pgAdmin, MailHog)
# - Relaxed resource limits and health checks
# - Enhanced logging and debugging
# - Interactive terminal access