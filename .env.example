# ==============================================================================
# Make.com FastMCP Server Configuration
# Comprehensive environment configuration with validation and fallbacks
# ==============================================================================

# ------------------------------------------------------------------------------
# üîë Make.com API Configuration (REQUIRED)
# ------------------------------------------------------------------------------

# Your Make.com API key - REQUIRED
# Get this from Settings ‚Üí API in your Make.com account
# Must be at least 10 characters long
# Example: abc123def456ghi789jkl012mno345pqr678stu901vwx234yz
MAKE_API_KEY=your_make_api_key_here

# Make.com API base URL - Choose your region
# Validated as proper URL format during startup
# EU (default): https://eu1.make.com/api/v2
# US: https://us1.make.com/api/v2
# Custom/Enterprise: https://your-instance.make.com/api/v2
MAKE_BASE_URL=https://eu1.make.com/api/v2

# Optional: Scope access to specific team/organization
# Find these IDs in your Make.com URLs when viewing team/org settings
# Team ID example: make.com/team/12345/settings ‚Üí MAKE_TEAM_ID=12345
# Org ID example: make.com/organization/67890/settings ‚Üí MAKE_ORGANIZATION_ID=67890
MAKE_TEAM_ID=your_team_id_here
MAKE_ORGANIZATION_ID=your_organization_id_here

# API client timeouts and retries with validation
# MAKE_TIMEOUT: Must be between 1000ms (1s) and 300000ms (5min)
MAKE_TIMEOUT=30000          # Request timeout in milliseconds (default: 30s)

# MAKE_RETRIES: Must be between 0 and 10 attempts
MAKE_RETRIES=3              # Number of retry attempts for failed requests (default: 3)

# ------------------------------------------------------------------------------
# üåê Server Configuration
# ------------------------------------------------------------------------------

# Server name and version - Used in server identification
# SERVER_NAME: Default is 'Make.com FastMCP Server'
SERVER_NAME=Make.com FastMCP Server

# SERVER_VERSION: Default is '1.0.0'
SERVER_VERSION=1.0.0

# Server port - Must be between 1 and 65535
# Change if 3000 conflicts with other services
# Values below 1024 require elevated privileges in development
PORT=3000

# Environment mode - Validated against allowed values
# Options: development, production, test
# Affects logging, authentication requirements, and performance optimizations
NODE_ENV=development

# Logging level - Validated against allowed values
# Options: debug, info, warn, error
# Recommendations:
#   - development: debug (detailed logging)
#   - production: warn (minimal logging for performance)
#   - testing: error (only critical issues)
LOG_LEVEL=info

# ------------------------------------------------------------------------------
# ‚ö° Rate Limiting Configuration
# ------------------------------------------------------------------------------

# Rate limiting to respect Make.com API limits and prevent abuse
# All values are validated during startup

# RATE_LIMIT_MAX_REQUESTS: Must be positive integer (minimum 1)
# Recommended: 50 for production, 100 for development, 200 for testing
RATE_LIMIT_MAX_REQUESTS=100     # Maximum requests per time window

# RATE_LIMIT_WINDOW_MS: Must be at least 1000ms (1 second)
# Standard: 60000ms (1 minute)
RATE_LIMIT_WINDOW_MS=60000      # Time window in milliseconds

# RATE_LIMIT_SKIP_SUCCESS: Boolean values (true/false, 1/0, yes/no)
# true = Only count failed requests toward rate limit
RATE_LIMIT_SKIP_SUCCESS=false   # Skip counting successful requests toward limit

# RATE_LIMIT_SKIP_FAILED: Boolean values (true/false, 1/0, yes/no)
# true = Only count successful requests toward rate limit
RATE_LIMIT_SKIP_FAILED=false    # Skip counting failed requests toward limit

# ------------------------------------------------------------------------------
# üîê Authentication Configuration (Optional)
# ------------------------------------------------------------------------------

# Enable server authentication - REQUIRED for production environments
# Boolean values validated: true/false, 1/0, yes/no (case insensitive)
# When enabled, clients must provide valid API key in x-api-key header
AUTH_ENABLED=false

# Secret key for JWT token signing and API key validation
# CRITICAL SECURITY REQUIREMENT:
#   - Must be at least 32 characters when AUTH_ENABLED=true
#   - Use cryptographically secure random generation
#   - Never commit secrets to version control
# 
# Generate secure secret examples:
#   - openssl rand -base64 32
#   - node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#   - python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# The configuration system includes a generateSecureSecret() utility function
AUTH_SECRET=your_auth_secret_here

# ------------------------------------------------------------------------------
# üìä Configuration Validation & Monitoring
# ------------------------------------------------------------------------------

# The enhanced configuration system provides comprehensive validation:
#
# ‚úÖ VALIDATION FEATURES:
#   - Zod schema validation for all configuration sections
#   - Type-safe environment variable parsing with fallbacks
#   - Custom error classes for detailed error reporting
#   - Environment-specific configuration presets
#   - Real-time configuration health checks
#   - Comprehensive validation reporting
#
# üîß VALIDATION METHODS:
#   - configManager.validateEnvironment() - Check environment variables
#   - configManager.getConfigurationReport() - Get complete config status
#   - createConfigurationValidator() - Access validation utilities
#
# üö® ERROR HANDLING:
#   - ConfigurationError: General configuration issues
#   - ValidationError: Schema validation failures
#   - Detailed error messages with field-specific information
#
# üìã CONFIGURATION PRESETS:
#   - ConfigPresets.development - Debug logging, no auth, high rate limits
#   - ConfigPresets.production - Warn logging, required auth, conservative limits
#   - ConfigPresets.testing - Error logging, no auth, unlimited rate limits

# ------------------------------------------------------------------------------
# üî¨ Optional Advanced Configuration (Future Features)
# ------------------------------------------------------------------------------

# Uncomment and configure these for advanced use cases:

# Cache configuration (if implementing caching)
# CACHE_TYPE=memory
# CACHE_TTL=300
# REDIS_URL=redis://localhost:6379

# Metrics and monitoring (if implementing observability)
# METRICS_ENABLED=false
# METRICS_PORT=9090
# TRACING_ENABLED=false

# Custom logging (for structured logging)
# LOG_FORMAT=json
# LOG_FILE_PATH=logs/make-fastmcp.log

# Development-specific settings
# ENABLE_CORS=true
# CORS_ORIGIN=http://localhost:3000

# Health check configuration
# HEALTH_CHECK_TIMEOUT=5000
# HEALTH_CHECK_INTERVAL=30000

# ------------------------------------------------------------------------------
# üìù Configuration Testing Commands
# ------------------------------------------------------------------------------
#
# Test your configuration with these npm scripts:
#
#   npm run config:validate  # Validate all environment variables
#   npm run config:report    # Generate comprehensive configuration report  
#   npm run config:test      # Run configuration validation tests
#   npm run config:presets   # List available configuration presets
#
# Environment validation example:
#   node -e "
#     const { configManager } = require('./dist/lib/config.js');
#     const result = configManager.validateEnvironment();
#     console.log('Valid:', result.valid);
#     if (!result.valid) console.log('Errors:', result.errors);
#     if (result.warnings.length) console.log('Warnings:', result.warnings);
#   "
#
# Configuration report example:  
#   node -e "
#     const { configManager } = require('./dist/lib/config.js');
#     console.log(configManager.getConfigurationReport());
#   "