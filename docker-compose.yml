# ==============================================================================
# Docker Compose Configuration for Make.com FastMCP Server
# Production-optimized setup with security best practices
# ==============================================================================

version: '3.8'

services:
  # ----------------------------------------------------------------------------
  # Main Application Service
  # ----------------------------------------------------------------------------
  make-fastmcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        - NODE_ENV=production
    image: make-fastmcp-server:latest
    container_name: make-fastmcp-server
    
    # Port mapping
    ports:
      - "${HOST_PORT:-3000}:3000"
    
    # Environment variables with secure defaults
    environment:
      # Core Make.com API Configuration
      - MAKE_API_KEY=${MAKE_API_KEY:?MAKE_API_KEY is required}
      - MAKE_BASE_URL=${MAKE_BASE_URL:-https://eu1.make.com/api/v2}
      - MAKE_TEAM_ID=${MAKE_TEAM_ID:-}
      - MAKE_ORGANIZATION_ID=${MAKE_ORGANIZATION_ID:-}
      - MAKE_TIMEOUT=${MAKE_TIMEOUT:-30000}
      - MAKE_RETRIES=${MAKE_RETRIES:-3}
      
      # Server Configuration
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - SERVER_NAME=${SERVER_NAME:-Make.com FastMCP Server}
      - SERVER_VERSION=${SERVER_VERSION:-1.0.0}
      
      # Security Configuration
      - AUTH_ENABLED=${AUTH_ENABLED:-true}
      - AUTH_SECRET=${AUTH_SECRET:?AUTH_SECRET is required when AUTH_ENABLED=true}
      
      # Rate Limiting Configuration
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-50}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_SKIP_SUCCESS=${RATE_LIMIT_SKIP_SUCCESS:-true}
      - RATE_LIMIT_SKIP_FAILED=${RATE_LIMIT_SKIP_FAILED:-false}
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User mapping (non-root)
    user: "1001:1001"
    
    # Volumes for persistent data
    volumes:
      - fastmcp-logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    
    # Network configuration
    networks:
      - make-fastmcp-network
    
    # Dependencies
    depends_on:
      - redis
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ----------------------------------------------------------------------------
  # Redis Cache Service (Optional)
  # ----------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: make-fastmcp-redis
    
    # Redis configuration
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-fastmcp-redis-password}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-fastmcp-redis-password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Restart policy
    restart: unless-stopped
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Persistent storage
    volumes:
      - redis-data:/data
    
    # Network
    networks:
      - make-fastmcp-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ----------------------------------------------------------------------------
  # Nginx Reverse Proxy (Optional)
  # ----------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: make-fastmcp-nginx
    
    # Port mapping
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      - make-fastmcp-server
    
    # Networks
    networks:
      - make-fastmcp-network
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==============================================================================
# Network Configuration
# ==============================================================================
networks:
  make-fastmcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================================================
# Volume Configuration
# ==============================================================================
volumes:
  # Application logs
  fastmcp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  
  # Redis persistent storage
  redis-data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${PWD}/data/redis
  
  # Nginx cache
  nginx-cache:
    driver: local
  
  # Nginx logs
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs/nginx

# ==============================================================================
# Service Profiles for Different Deployment Scenarios
# ==============================================================================

# Usage Examples:
#
# 1. Basic production deployment:
#    docker-compose up -d make-fastmcp-server
#
# 2. Full stack with caching and proxy:
#    docker-compose --profile full up -d
#
# 3. Development mode:
#    docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
#
# 4. Production with scaling:
#    docker-compose up -d --scale make-fastmcp-server=3