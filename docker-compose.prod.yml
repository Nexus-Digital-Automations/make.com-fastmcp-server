# ==============================================================================
# Production Docker Compose Configuration
# Optimized for production deployment with enhanced monitoring and performance
# ==============================================================================

version: '3.8'

services:
  # ----------------------------------------------------------------------------
  # Main Application Service (Production Optimized)
  # ----------------------------------------------------------------------------
  make-fastmcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        - NODE_ENV=production
        - BUILD_OPTIMIZATION=true
    image: make-fastmcp-server:production
    container_name: make-fastmcp-server-prod
    
    # Port mapping
    ports:
      - "${HOST_PORT:-3000}:3000"
      - "${METRICS_PORT:-9090}:9090"  # Prometheus metrics endpoint
    
    # Enhanced environment configuration
    environment:
      # Core Make.com API Configuration
      - MAKE_API_KEY=${MAKE_API_KEY:?MAKE_API_KEY is required}
      - MAKE_BASE_URL=${MAKE_BASE_URL:-https://eu1.make.com/api/v2}
      - MAKE_TEAM_ID=${MAKE_TEAM_ID:-}
      - MAKE_ORGANIZATION_ID=${MAKE_ORGANIZATION_ID:-}
      - MAKE_TIMEOUT=${MAKE_TIMEOUT:-30000}
      - MAKE_RETRIES=${MAKE_RETRIES:-3}
      
      # Server Configuration
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - SERVER_NAME=${SERVER_NAME:-Make.com FastMCP Server}
      - SERVER_VERSION=${SERVER_VERSION:-1.0.0}
      
      # Production Performance Configuration
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30000}
      - KEEP_ALIVE_TIMEOUT=${KEEP_ALIVE_TIMEOUT:-5000}
      - HEADERS_TIMEOUT=${HEADERS_TIMEOUT:-60000}
      - MAX_CONCURRENT_CONNECTIONS=${MAX_CONCURRENT_CONNECTIONS:-1000}
      - MAX_TOOL_EXECUTIONS=${MAX_TOOL_EXECUTIONS:-100}
      - MEMORY_LIMIT_MB=${MEMORY_LIMIT_MB:-512}
      - CPU_THROTTLE_THRESHOLD=${CPU_THROTTLE_THRESHOLD:-80}
      
      # Security Configuration
      - AUTH_ENABLED=${AUTH_ENABLED:-true}
      - AUTH_SECRET=${AUTH_SECRET:?AUTH_SECRET is required when AUTH_ENABLED=true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
      # Rate Limiting Configuration
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_SKIP_SUCCESS=${RATE_LIMIT_SKIP_SUCCESS:-true}
      - RATE_LIMIT_SKIP_FAILED=${RATE_LIMIT_SKIP_FAILED:-false}
      
      # Monitoring and Observability
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - METRICS_PATH=${METRICS_PATH:-/metrics}
      - HEALTH_CHECK_PATH=${HEALTH_CHECK_PATH:-/health}
      - LIVENESS_PATH=${LIVENESS_PATH:-/health/live}
      - READINESS_PATH=${READINESS_PATH:-/health/ready}
      
      # Cache Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL:-300}
      - MAX_MEMORY_CACHE=${MAX_MEMORY_CACHE:-100}
      
      # Logging Configuration
      - ENABLE_ACCESS_LOGS=${ENABLE_ACCESS_LOGS:-true}
      - ENABLE_ERROR_TRACKING=${ENABLE_ERROR_TRACKING:-true}
      - ENABLE_STRUCTURED_LOGGING=${ENABLE_STRUCTURED_LOGGING:-true}
    
    # Enhanced resource limits for production
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${CPU_RESERVATION:-1.0}'
          memory: ${MEMORY_RESERVATION:-512M}
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Comprehensive health check
    healthcheck:
      test: ["CMD", "node", "-e", "
        const http = require('http');
        const options = {
          hostname: 'localhost',
          port: 3000,
          path: '/health/ready',
          timeout: 8000,
          headers: { 'User-Agent': 'HealthCheck/1.0' }
        };
        const req = http.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            if (res.statusCode === 200) {
              try {
                const health = JSON.parse(data);
                process.exit(health.ready ? 0 : 1);
              } catch { process.exit(1); }
            } else { process.exit(1); }
          });
        });
        req.on('error', () => process.exit(1));
        req.on('timeout', () => process.exit(1));
        req.end();
      "]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Enhanced security options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Allow performance monitoring system calls
    read_only: false  # Allow log writing
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # User mapping (non-root)
    user: "1001:1001"
    
    # Production volumes with optimized mount options
    volumes:
      - fastmcp-logs:/app/logs:rw,Z
      - fastmcp-config:/app/config:ro,Z
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    
    # Network configuration
    networks:
      - make-fastmcp-network
    
    # Dependencies with health checks
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    
    # Production logging with rotation
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
        labels: "service,version,environment"
    
    # Container labels for monitoring
    labels:
      - "service.name=make-fastmcp-server"
      - "service.version=${SERVER_VERSION:-1.0.0}"
      - "service.environment=production"
      - "monitoring.prometheus.scrape=true"
      - "monitoring.prometheus.port=9090"
      - "monitoring.prometheus.path=/metrics"

  # ----------------------------------------------------------------------------
  # Redis Cache Service (Production Optimized)
  # ----------------------------------------------------------------------------
  redis:
    image: redis:7.2-alpine
    container_name: make-fastmcp-redis-prod
    
    # Production Redis configuration
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-secure-redis-password-change-me}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
      --stop-writes-on-bgsave-error yes
      --rdbcompression yes
      --rdbchecksum yes
      --maxclients 10000
    
    # Enhanced resource limits
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-1.0}'
          memory: ${REDIS_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${REDIS_CPU_RESERVATION:-0.25}'
          memory: ${REDIS_MEMORY_RESERVATION:-128M}
    
    # Enhanced health check
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure-redis-password-change-me}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Persistent storage with backup
    volumes:
      - redis-data:/data:Z
      - redis-backup:/backup:Z
    
    # Network
    networks:
      - make-fastmcp-network
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  # ----------------------------------------------------------------------------
  # Prometheus Metrics Collection (Production)
  # ----------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: make-fastmcp-prometheus
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    # Port mapping
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    
    # Configuration and storage
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:Z
      - prometheus-config:/etc/prometheus:Z
    
    # Dependencies
    depends_on:
      - make-fastmcp-server
    
    # Networks
    networks:
      - make-fastmcp-network
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ----------------------------------------------------------------------------
  # Nginx Reverse Proxy (Production SSL)
  # ----------------------------------------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: make-fastmcp-nginx-prod
    
    # Port mapping
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Configuration and SSL
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_DIR:-./nginx/ssl}:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx:Z
      - nginx-logs:/var/log/nginx:Z
      - nginx-config:/etc/nginx/conf.d:Z
    
    # Dependencies with health checks
    depends_on:
      make-fastmcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Networks
    networks:
      - make-fastmcp-network
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging with log rotation
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"

# ==============================================================================
# Production Network Configuration
# ==============================================================================
networks:
  make-fastmcp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
          gateway: ${NETWORK_GATEWAY:-172.20.0.1}
    driver_opts:
      com.docker.network.bridge.name: ${BRIDGE_NAME:-fastmcp-prod-br0}
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# ==============================================================================
# Production Volume Configuration
# ==============================================================================
volumes:
  # Application data with backup strategy
  fastmcp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${LOG_DIR:-${PWD}/logs}
  
  fastmcp-config:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${CONFIG_DIR:-${PWD}/config}
  
  # Redis persistent storage with backup
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${REDIS_DATA_DIR:-${PWD}/data/redis}
  
  redis-backup:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${REDIS_BACKUP_DIR:-${PWD}/backup/redis}
  
  # Prometheus monitoring data
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${PROMETHEUS_DATA_DIR:-${PWD}/data/prometheus}
  
  prometheus-config:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${PROMETHEUS_CONFIG_DIR:-${PWD}/monitoring}
  
  # Nginx cache and logs
  nginx-cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=101,gid=101
  
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${NGINX_LOGS_DIR:-${PWD}/logs/nginx}
  
  nginx-config:
    driver: local
    driver_opts:
      type: none
      o: bind,Z
      device: ${NGINX_CONFIG_DIR:-${PWD}/nginx/conf.d}

# ==============================================================================
# Production Configuration and Usage
# ==============================================================================

# Usage Examples:
#
# 1. Full production stack:
#    docker-compose -f docker-compose.prod.yml up -d
#
# 2. With custom configuration:
#    export CPU_LIMIT=4.0
#    export MEMORY_LIMIT=2G
#    export REDIS_MAX_MEMORY=512mb
#    docker-compose -f docker-compose.prod.yml up -d
#
# 3. With monitoring enabled:
#    docker-compose -f docker-compose.prod.yml up -d
#    # Access metrics at http://localhost:9091
#
# 4. SSL termination with custom certificates:
#    export SSL_CERT_DIR=/path/to/ssl/certs
#    docker-compose -f docker-compose.prod.yml up -d
#
# 5. Scaling application instances:
#    docker-compose -f docker-compose.prod.yml up -d --scale make-fastmcp-server=3
#
# Environment Variables Required:
# - MAKE_API_KEY: Make.com API key
# - AUTH_SECRET: JWT secret for authentication
# - REDIS_PASSWORD: Redis authentication password
#
# Optional Environment Variables:
# - SERVER_VERSION: Application version (default: 1.0.0)
# - CPU_LIMIT: CPU limit per container (default: 2.0)
# - MEMORY_LIMIT: Memory limit per container (default: 1G)
# - REDIS_MAX_MEMORY: Redis memory limit (default: 256mb)
# - SSL_CERT_DIR: SSL certificate directory (default: ./nginx/ssl)
#
# Directory Structure Expected:
# ./logs/                    # Application logs
# ./data/redis/             # Redis persistent data
# ./backup/redis/           # Redis backups
# ./data/prometheus/        # Prometheus data
# ./monitoring/             # Prometheus configuration
# ./nginx/ssl/              # SSL certificates
# ./nginx/conf.d/           # Additional nginx configs
# ./config/                 # Application configuration files